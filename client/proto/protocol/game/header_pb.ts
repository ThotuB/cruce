// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file protocol/game/header.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message protocol.GameProtocolHeader
 */
export class GameProtocolHeader extends Message<GameProtocolHeader> {
  /**
   * @generated from field: uint32 data_length = 1;
   */
  dataLength = 0;

  /**
   * @generated from field: string command = 2;
   */
  command = "";

  constructor(data?: PartialMessage<GameProtocolHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.GameProtocolHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameProtocolHeader {
    return new GameProtocolHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameProtocolHeader {
    return new GameProtocolHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameProtocolHeader {
    return new GameProtocolHeader().fromJsonString(jsonString, options);
  }

  static equals(a: GameProtocolHeader | PlainMessage<GameProtocolHeader> | undefined, b: GameProtocolHeader | PlainMessage<GameProtocolHeader> | undefined): boolean {
    return proto3.util.equals(GameProtocolHeader, a, b);
  }
}

