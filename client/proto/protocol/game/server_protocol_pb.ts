// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file protocol/game/server_protocol.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GameProtocolHeader } from "./header_pb";
import { Card } from "./misc_pb";

/**
 * @generated from message protocol.GameServerProtocol
 */
export class GameServerProtocol extends Message<GameServerProtocol> {
  /**
   * @generated from field: protocol.GameProtocolHeader header = 1;
   */
  header?: GameProtocolHeader;

  /**
   * @generated from oneof protocol.GameServerProtocol.message
   */
  message: {
    /**
     * @generated from field: protocol.PlayCard play_card = 2;
     */
    value: PlayCard;
    case: "playCard";
  } | {
    /**
     * @generated from field: protocol.PlayBid play_bid = 3;
     */
    value: PlayBid;
    case: "playBid";
  } | {
    /**
     * @generated from field: protocol.AccuseCheating accuse_cheating = 4;
     */
    value: AccuseCheating;
    case: "accuseCheating";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GameServerProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.GameServerProtocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: GameProtocolHeader },
    { no: 2, name: "play_card", kind: "message", T: PlayCard, oneof: "message" },
    { no: 3, name: "play_bid", kind: "message", T: PlayBid, oneof: "message" },
    { no: 4, name: "accuse_cheating", kind: "message", T: AccuseCheating, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameServerProtocol {
    return new GameServerProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameServerProtocol {
    return new GameServerProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameServerProtocol {
    return new GameServerProtocol().fromJsonString(jsonString, options);
  }

  static equals(a: GameServerProtocol | PlainMessage<GameServerProtocol> | undefined, b: GameServerProtocol | PlainMessage<GameServerProtocol> | undefined): boolean {
    return proto3.util.equals(GameServerProtocol, a, b);
  }
}

/**
 * @generated from message protocol.PlayCard
 */
export class PlayCard extends Message<PlayCard> {
  /**
   * @generated from field: protocol.Card card = 1;
   */
  card?: Card;

  constructor(data?: PartialMessage<PlayCard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.PlayCard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "card", kind: "message", T: Card },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayCard {
    return new PlayCard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayCard {
    return new PlayCard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayCard {
    return new PlayCard().fromJsonString(jsonString, options);
  }

  static equals(a: PlayCard | PlainMessage<PlayCard> | undefined, b: PlayCard | PlainMessage<PlayCard> | undefined): boolean {
    return proto3.util.equals(PlayCard, a, b);
  }
}

/**
 * @generated from message protocol.PlayBid
 */
export class PlayBid extends Message<PlayBid> {
  /**
   * @generated from field: uint32 bid = 1;
   */
  bid = 0;

  constructor(data?: PartialMessage<PlayBid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.PlayBid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bid", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayBid {
    return new PlayBid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayBid {
    return new PlayBid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayBid {
    return new PlayBid().fromJsonString(jsonString, options);
  }

  static equals(a: PlayBid | PlainMessage<PlayBid> | undefined, b: PlayBid | PlainMessage<PlayBid> | undefined): boolean {
    return proto3.util.equals(PlayBid, a, b);
  }
}

/**
 * @generated from message protocol.AccuseCheating
 */
export class AccuseCheating extends Message<AccuseCheating> {
  constructor(data?: PartialMessage<AccuseCheating>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.AccuseCheating";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccuseCheating {
    return new AccuseCheating().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccuseCheating {
    return new AccuseCheating().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccuseCheating {
    return new AccuseCheating().fromJsonString(jsonString, options);
  }

  static equals(a: AccuseCheating | PlainMessage<AccuseCheating> | undefined, b: AccuseCheating | PlainMessage<AccuseCheating> | undefined): boolean {
    return proto3.util.equals(AccuseCheating, a, b);
  }
}

