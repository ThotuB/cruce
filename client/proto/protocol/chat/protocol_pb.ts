// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file protocol/chat/protocol.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message protocol.ChatServerProtocol
 */
export class ChatServerProtocol extends Message<ChatServerProtocol> {
  /**
   * @generated from field: protocol.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: protocol.MessageSend message_send = 2;
   */
  messageSend?: MessageSend;

  constructor(data?: PartialMessage<ChatServerProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.ChatServerProtocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: Header },
    { no: 2, name: "message_send", kind: "message", T: MessageSend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatServerProtocol {
    return new ChatServerProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatServerProtocol {
    return new ChatServerProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatServerProtocol {
    return new ChatServerProtocol().fromJsonString(jsonString, options);
  }

  static equals(a: ChatServerProtocol | PlainMessage<ChatServerProtocol> | undefined, b: ChatServerProtocol | PlainMessage<ChatServerProtocol> | undefined): boolean {
    return proto3.util.equals(ChatServerProtocol, a, b);
  }
}

/**
 * @generated from message protocol.ChatClientProtocol
 */
export class ChatClientProtocol extends Message<ChatClientProtocol> {
  /**
   * @generated from field: protocol.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from oneof protocol.ChatClientProtocol.message
   */
  message: {
    /**
     * @generated from field: protocol.MessageReceive message_receive = 2;
     */
    value: MessageReceive;
    case: "messageReceive";
  } | {
    /**
     * @generated from field: protocol.MessageHistory message_history = 3;
     */
    value: MessageHistory;
    case: "messageHistory";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChatClientProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.ChatClientProtocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: Header },
    { no: 2, name: "message_receive", kind: "message", T: MessageReceive, oneof: "message" },
    { no: 3, name: "message_history", kind: "message", T: MessageHistory, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatClientProtocol {
    return new ChatClientProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatClientProtocol {
    return new ChatClientProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatClientProtocol {
    return new ChatClientProtocol().fromJsonString(jsonString, options);
  }

  static equals(a: ChatClientProtocol | PlainMessage<ChatClientProtocol> | undefined, b: ChatClientProtocol | PlainMessage<ChatClientProtocol> | undefined): boolean {
    return proto3.util.equals(ChatClientProtocol, a, b);
  }
}

/**
 * @generated from message protocol.Header
 */
export class Header extends Message<Header> {
  /**
   * @generated from field: uint32 data_length = 1;
   */
  dataLength = 0;

  /**
   * @generated from field: string command = 2;
   */
  command = "";

  constructor(data?: PartialMessage<Header>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Header";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Header {
    return new Header().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Header {
    return new Header().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Header {
    return new Header().fromJsonString(jsonString, options);
  }

  static equals(a: Header | PlainMessage<Header> | undefined, b: Header | PlainMessage<Header> | undefined): boolean {
    return proto3.util.equals(Header, a, b);
  }
}

/**
 * @generated from message protocol.MessageSend
 */
export class MessageSend extends Message<MessageSend> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string messsage = 2;
   */
  messsage = "";

  constructor(data?: PartialMessage<MessageSend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.MessageSend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messsage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageSend {
    return new MessageSend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageSend {
    return new MessageSend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageSend {
    return new MessageSend().fromJsonString(jsonString, options);
  }

  static equals(a: MessageSend | PlainMessage<MessageSend> | undefined, b: MessageSend | PlainMessage<MessageSend> | undefined): boolean {
    return proto3.util.equals(MessageSend, a, b);
  }
}

/**
 * @generated from message protocol.MessageReceive
 */
export class MessageReceive extends Message<MessageReceive> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: string user_image_url = 4;
   */
  userImageUrl = "";

  /**
   * @generated from field: google.protobuf.Timestamp time = 5;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<MessageReceive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.MessageReceive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReceive {
    return new MessageReceive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReceive {
    return new MessageReceive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReceive {
    return new MessageReceive().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReceive | PlainMessage<MessageReceive> | undefined, b: MessageReceive | PlainMessage<MessageReceive> | undefined): boolean {
    return proto3.util.equals(MessageReceive, a, b);
  }
}

/**
 * @generated from message protocol.MessageHistory
 */
export class MessageHistory extends Message<MessageHistory> {
  /**
   * @generated from field: repeated protocol.MessageReceive messages = 1;
   */
  messages: MessageReceive[] = [];

  constructor(data?: PartialMessage<MessageHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.MessageHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: MessageReceive, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHistory {
    return new MessageHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHistory {
    return new MessageHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHistory {
    return new MessageHistory().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHistory | PlainMessage<MessageHistory> | undefined, b: MessageHistory | PlainMessage<MessageHistory> | undefined): boolean {
    return proto3.util.equals(MessageHistory, a, b);
  }
}

